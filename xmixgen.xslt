<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2015 Geoff Hill

This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
for more details.

See https://www.gnu.org/licenses/gpl-3.0.txt for the full text of the
GNU General Public License, version 3.
-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:import href="roboto-bold.xsl"/>
  <xsl:output method="html" doctype-system="about:legacy-compat"/>
  <xsl:template match="/mixtape">
    <html lang="en" itemscope="" itemtype="http://schema.org/WebSite">
      <xsl:comment> Generated by xmixtap, distributed under the GNU GPLv3+.</xsl:comment>
      <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta charset="utf-8" />
        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="viewport"
              content="width=device-width,minimum-scale=1.0,initial-scale=1" />
	<meta itemprop="license" content="https://www.gnu.org/licenses/gpl-3.0.txt" />
	<link rel="shortcut icon">
          <xsl:attribute name="content">
            <xsl:value-of select="favicon" />
          </xsl:attribute>
	</link>
        <title itemprop="name"><xsl:value-of select="/mixtape/name" /></title>
        <style>
@font-face {
  font-family: 'xmixgen'; font-style: normal; font-weight: bold;
  src: url('<xsl:call-template name="font"/>') format('woff2');
}
body {
  margin: 0;
  background-color: #eee;
  font-family: 'xmixgen', 'Roboto', 'Droid Sans', sans-serif;
  font-weight: bold;
}
header {
  width: 100%;
  height: 64px;
  line-height: 64px;
  box-shadow: 0 -2px 10px 4px rgba(0, 0, 0, 0.4);
  background-color: <xsl:value-of select="color[@for='banner']" />;
  color: #fff;
  font-size: 32px;
  text-align: center;
  overflow: hidden;
}
main {
  margin: 48px auto;
  padding: 0 28px;
  max-width: 680px;
  color: #aaa;
  font-size: 24px;
  overflow: hidden;
}
section {
  margin: 18px;
  padding: 18px;
  background-color: #fff;
  box-shadow:
  0 4px 5px 0 rgba(0, 0, 0, 0.11),
  0 1px 9px 0 rgba(0, 0, 0, 0.12),
  0 2px 4px -1px rgba(0, 0, 0, 0.4);
  border-radius: 2px;
  overflow: hidden;
}
section + section { margin-top: -18px; }
section:hover { background-color: #f8f8f8; }
h1, h4, h5 { font-size: inherit; display: inline; }
h5 { color: <xsl:value-of select="color[@for='artist']" />; }
h4 { color: <xsl:value-of select="color[@for='title']" />; }
@media (max-width: 639px) {
  header { height: 56px; line-height: 56px; font-size: 28px; }
  main { margin: 20px auto; padding: 0 16px; font-size: 21px; }
  section { padding: 14px; }
}
        </style>
      </head>
      <body itemprop="mainEntity" itemscope="" itemtype="http://schema.org/MusicPlaylist">
        <header>
          <h1 itemprop="name"><xsl:value-of select="/mixtape/name" /></h1>
        </header>
        <main>
          <xsl:for-each select="/mixtape/track">
            <section itemprop="track" itemscope=""
                     itemtype="http://schema.org/MusicRecording">
              <xsl:if test="@artist">
                <h5 itemprop="http://schema.org/byArtist" itemscope=""
                    itemtype="http://schema.org/MusicGroup">
                  <span itemprop="name"><xsl:value-of select="@artist" /></span>
                </h5>
                <span> &#8212; </span>
              </xsl:if>
              <h4 itemprop="name"><xsl:value-of select="@title" /></h4>
	      <div itemprop="audio" itemscope=""
		   itemtype="http://schema.org/AudioObject">
		<meta itemprop="encodingFormat" content="mp3" />
		<meta itemprop="fileFormat" content="audio/mpeg" />
		<meta itemprop="contentUrl">
                  <xsl:attribute name="content">
                    <xsl:value-of select="@src" />
                  </xsl:attribute>
		</meta>
                <audio preload="none">
                  <xsl:attribute name="src">
                    <xsl:value-of select="@src" />
                  </xsl:attribute>
                </audio>
	      </div>
            </section>
          </xsl:for-each>
        </main>
	<script type="text/javascript"><![CDATA[
var tracks = document.getElementsByTagName('section');

var toggle = function(section) {
  var audio = section.childAudio;
  for (i = 0; i < tracks.length; i++) {
    var other = tracks[i].childAudio;
    if (other !== audio) {
      other.pause();
      if (other.currentTime !== 0) {
        other.currentTime = 0;
      }
    }
  }
  if (audio.paused) {
    if (!section.style.background) {
      section.style.background = '#f8f8f8';
    }
    audio.play();
  } else {
    audio.pause();
  }
}

var drawProgress = function(section) {
  var audio = section.childAudio;
  var progress = 100 * (audio.currentTime / audio.duration);
  section.style.background = 'linear-gradient(to right, ]]><xsl:value-of select="/mixtape/color[@for='progress']" /><![CDATA[ ' + progress + '%, #f8f8f8 ' + progress + '%)';
}

var click = function(event) {
  toggle(event.currentTarget);
}

var dblclick = function(event) {
  var audio = event.currentTarget.childAudio;
  if (!audio.paused) {
    audio.currentTime = 0;
  }
}

var playing = function(event) {
  var section = event.currentTarget.parentSection;
  for (i = 0; i < tracks.length; i++) {
    var track = tracks[i];
    if (track.intervalId) clearInterval(track.intervalId);
    if (track !== section) {
      tracks[i].style.background = null;
    }
  }
  section.intervalId = setInterval(drawProgress, 1000, section);
}

var ended = function(event) {
  var section = event.currentTarget.parentSection;
  clearInterval(section.intervalId);
  section.style.background = null;
  var next = section.nextSibling;
  if (next) {
    toggle(next);
  }
}

window.onload = function() {
  for (i = 0; i < tracks.length; i++) {
    var track = tracks[i];
    track.addEventListener("click", click);
    track.addEventListener("dblclick", dblclick)
    var audio = track.getElementsByTagName('audio')[0];
    audio.parentSection = track;
    track.childAudio = audio;
    audio.addEventListener("playing", playing);
    audio.addEventListener("ended", ended);
  }
}
]]></script>
      </body>
    </html>
  </xsl:template>
</xsl:stylesheet>
